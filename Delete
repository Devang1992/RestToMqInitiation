const [queues, setQueues] = useState([]);
const [selectedQueue, setSelectedQueue] = useState(null);

// This goes in your useEffect or callback function
stompClient.subscribe('/topic/queue', (response) => {
  console.log('Received message:', response.body);
  
  // Parse the JSON response if it's in string format
  const queueData = JSON.parse(response.body);
  
  // Update state with the received queues
  setQueues(queueData);
  setSocketMessage(response.body);
});




{queues.length === 0 ? (
  <div style={{ textAlign: 'center', color: '#666', marginTop: '20px' }}>
    No queues are being listened
  </div>
) : (
  <div>
    {queues.map((queue, index) => (
      <button
        key={index}
        style={queueButtonStyle(selectedQueue === queue)}
        onClick={() => setSelectedQueue(queue)}
      >
        {queue}
      </button>
    ))}
  </div>
)}




import React, { useState } from 'react';

const QueueMonitorPreview = () => {
  const [queues, setQueues] = useState([]);
  const [selectedQueue, setSelectedQueue] = useState(null);

  const simulateFetch = () => {
    // Simulating websocket response
    setQueues(['ESF.QUEUE.1', 'SIT1.QUEUE.1', 'DEV.QUEUE.1']);
  };

  const containerStyle = {
    width: '500px',
    height: '400px',
    border: '1px solid #ccc',
    borderRadius: '8px',
    overflow: 'hidden',
    backgroundColor: '#f5f5f5',
    fontFamily: 'Arial, sans-serif'
  };

  const buttonStyle = {
    width: '100%',
    padding: '10px',
    backgroundColor: '#0066cc',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    marginBottom: '10px'
  };

  const queueButtonStyle = (isSelected) => ({
    width: '100%',
    padding: '8px',
    margin: '4px 0',
    backgroundColor: isSelected ? '#e6f0ff' : 'white',
    border: '1px solid #ddd',
    borderRadius: '4px',
    textAlign: 'left',
    cursor: 'pointer'
  });

  return (
    <div style={containerStyle}>
      <div style={{ display: 'flex', height: '100%' }}>
        <div style={{ width: '30%', padding: '15px', borderRight: '1px solid #ddd', backgroundColor: 'white' }}>
          <button style={buttonStyle} onClick={simulateFetch}>
            View Queues
          </button>

          {queues.length === 0 ? (
            <div style={{ textAlign: 'center', color: '#666', marginTop: '20px' }}>
              No queues are being listened
            </div>
          ) : (
            <div>
              {queues.map((queue, index) => (
                <button
                  key={index}
                  style={queueButtonStyle(selectedQueue === queue)}
                  onClick={() => setSelectedQueue(queue)}
                >
                  {queue}
                </button>
              ))}
            </div>
          )}
        </div>

        <div style={{ width: '70%', padding: '15px', backgroundColor: 'white' }}>
          {selectedQueue ? (
            <div>
              <h3 style={{ margin: '0 0 15px 0', color: '#333' }}>Queue: {selectedQueue}</h3>
              <div style={{ 
                padding: '10px', 
                backgroundColor: '#f8f9fa', 
                borderRadius: '4px',
                border: '1px solid #e9ecef'
              }}>
                <p style={{ margin: '5px 0' }}>Status: Active</p>
                <p style={{ margin: '5px 0' }}>Messages: 42</p>
                <p style={{ margin: '5px 0' }}>Last Updated: Just now</p>
              </div>
            </div>
          ) : (
            <div style={{ 
              display: 'flex', 
              height: '100%', 
              alignItems: 'center', 
              justifyContent: 'center',
              color: '#666' 
            }}>
              Select a queue to view details
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default QueueMonitorPreview;
