@Test
public void testAllExceptionHandlingMethods() {
    // Setup
    ErrorHandlingSupport errorHandlingSupport = mock(ErrorHandlingSupport.class);
    
    // Create instance of the exception handler using reflection or a constructor
    YourExceptionHandlerClass exceptionHandler = new YourExceptionHandlerClass();
    // Set the errorHandlingSupport field using reflection or a setter
    ReflectionTestUtils.setField(exceptionHandler, "errorHandlingSupport", errorHandlingSupport);
    
    // Mock various return values
    Status mockStatus = new Status();
    ResponseEntity<Status> mockResponseEntity = ResponseEntity.badRequest().body(mockStatus);
    ResponseEntity<Object> mockObjectResponseEntity = ResponseEntity.badRequest().body("Test");
    
    when(errorHandlingSupport.getStatusWithoutPopulatingAdditionalStatus(any(ErrorStatus.class)))
        .thenReturn(mockStatus);
    when(errorHandlingSupport.getResponseEntity(any(Status.class)))
        .thenReturn(mockResponseEntity);
    when(errorHandlingSupport.getStatus(any(ErrorStatus.class), anyString(), anyString(), anyString(), anyString()))
        .thenReturn(mockStatus);
    when(errorHandlingSupport.getStatus(any(ErrorStatus.class), anyString()))
        .thenReturn(mockStatus);
    when(errorHandlingSupport.populatePlaceholderInStatusDesc(any(), any(), any()))
        .thenReturn("Test message");
    
    // Test handleConstraintViolationException
    ConstraintViolationException cvException = mock(ConstraintViolationException.class);
    Set<ConstraintViolation<?>> violations = new HashSet<>();
    ConstraintViolation<?> violation = mock(ConstraintViolation.class);
    when(violation.getMessage()).thenReturn("Validation failed");
    violations.add(violation);
    when(cvException.getConstraintViolations()).thenReturn(violations);
    
    ResponseEntity<Status> cvResponse = exceptionHandler.handleConstraintViolationException(cvException);
    assertNotNull(cvResponse);
    assertEquals(mockResponseEntity, cvResponse);
    
    // Test handleMethodArgumentNotValid
    MethodArgumentNotValidException maException = mock(MethodArgumentNotValidException.class);
    HttpHeaders headers = new HttpHeaders();
    HttpStatusCode httpStatus = HttpStatus.BAD_REQUEST;
    WebRequest request = mock(WebRequest.class);
    
    ResponseEntity<Object> maResponse = exceptionHandler.handleMethodArgumentNotValid(
            maException, headers, httpStatus, request);
    assertNotNull(maResponse);
    verify(errorHandlingSupport).getStatusWithoutPopulatingAdditionalStatus(ErrorStatus.ERR_400_BAD_REQUEST);
    
    // Test handleInvalidFormatException
    InvalidFormatException ifException = mock(InvalidFormatException.class);
    when(ifException.getPath()).thenReturn(Collections.singletonList(mock(JsonMappingException.Reference.class)));
    when(ifException.getTargetType()).thenReturn(String.class);
    when(ifException.getLocation()).thenReturn(mock(JsonLocation.class));
    when(ifException.getLocation().getLineNr()).thenReturn(10);
    when(ifException.getLocation().getColumnNr()).thenReturn(20);
    
    ResponseEntity<Status> ifResponse = exceptionHandler.handleInvalidFormatException(ifException);
    assertNotNull(ifResponse);
    verify(errorHandlingSupport).getStatus(eq(ErrorStatus.ERR_400_INVALID_DATATYPE_FORMAT), anyString());
    
    // Test handleHttpMessageNotReadable
    HttpMessageNotReadableException hmnrException = mock(HttpMessageNotReadableException.class);
    when(hmnrException.getCause()).thenReturn(ifException); // Test the instanceof case
    
    ResponseEntity<Object> hmnrResponse = exceptionHandler.handleHttpMessageNotReadable(
            hmnrException, headers, httpStatus, request);
    assertNotNull(hmnrResponse);
    
    // Test with different cause
    when(hmnrException.getCause()).thenReturn(new RuntimeException()); // Test the else case
    when(hmnrException.getMessage()).thenReturn("Error message");
    
    ResponseEntity<Object> hmnrResponse2 = exceptionHandler.handleHttpMessageNotReadable(
            hmnrException, headers, httpStatus, request);
    assertNotNull(hmnrResponse2);
    verify(errorHandlingSupport).getStatus(eq(ErrorStatus.ERR_400_BAD_REQUEST), eq("Error message"));
}
