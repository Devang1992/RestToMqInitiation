 Sample JSON Input (from Kafka)
json
Copy
Edit
{
  "id": "U123",
  "name": "Devang",
  "email": "dev@example.com",
  "transaction": {
    "amount": 250.75,
    "currency": "USD"
  },
  "meta": {
    "source": {
      "system": "FPL",
      "version": "v2"
    }
  }
}
üìù Sample Template (from resources/templates/message_template_type1.txt)
txt
Copy
Edit
User ID: {{id}}
Name: {{name}}
Email: {{email}}

Transaction:
  Amount: {{transaction.amount}}
  Currency: {{transaction.currency}}

Source System: {{meta.source.system}}
Source Version: {{meta.source.version}}
‚öôÔ∏è Java Code to Render This Using Handlebars
üîß Dependencies (in pom.xml)
xml
Copy
Edit
<dependency>
  <groupId>com.github.jknack</groupId>
  <artifactId>handlebars</artifactId>
  <version>4.3.1</version>
</dependency>

<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-databind</artifactId>
</dependency>
üöÄ Java Class: TemplateRenderer
java
Copy
Edit
package com.example.batch.util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.jknack.handlebars.Handlebars;
import com.github.jknack.handlebars.Template;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

public class TemplateRenderer {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static final Handlebars handlebars = new Handlebars();

    public static String renderFromJson(String jsonPayload, String templatePath) throws Exception {
        // 1. Read the template file
        String templateContent = Files.readString(Paths.get(templatePath));

        // 2. Convert JSON to Map (nested structure preserved)
        Map<String, Object> model = objectMapper.readValue(jsonPayload, new TypeReference<>() {});

        // 3. Compile and apply
        Template template = handlebars.compileInline(templateContent);
        return template.apply(model);
    }
}
üß™ Test Usage
java
Copy
Edit
public class TestTemplate {
    public static void main(String[] args) throws Exception {
        String jsonPayload = """
        {
          "id": "U123",
          "name": "d",
          "email": "d@example.com",
          "transaction": {
            "amount": 250.75,
            "currency": "USD"
          },
          "meta": {
            "source": {
              "system": "FPL",
              "version": "v2"
            }
          }
        }
        """;

        String templatePath = "src/main/resources/templates/message_template_type1.txt";
        String result = TemplateRenderer.renderFromJson(jsonPayload, templatePath);
        System.out.println(result);
    }
}
‚úÖ Output (Text File Content)
yaml
Copy
Edit
User ID: U123
Name: Devang
Email: dev@example.com

Transaction:
  Amount: 250.75
  Currency: USD

Source System: FPL
Source Version: v2
üîÅ Notes:
You can dynamically pass the template path based on templateType field in the JSON.

Nested objects like transaction.amount and meta.source.system work out of the box.

You don‚Äôt need to write .replace() for each field ‚Äî the Handlebars engine + Jackson handles the mapping.

Wrap the entire line in an {{#if ...}} block:

üßæ Example Template (message_template_type1.txt)
h
Copy
Edit
User ID: {{id}}
Name: {{name}}
Email: {{email}}

{{#if transaction.amount}}
Amount: {{transaction.amount}}
{{/if}}

{{#if transaction.currency}}
Currency: {{transaction.currency}}
{{/if}}

{{#if meta.source.system}}
Source System: {{meta.source.system}}
{{/if}}
‚úÖ What This Does:
If transaction.amount exists and is non-null, it renders the line

If it's missing or blank, it omits the whole line

üß† Note on Nested Nulls
If transaction or meta.source is missing entirely, transaction.amount or meta.source.system won‚Äôt throw errors ‚Äî Handlebars just treats them as falsy and skips.

‚úÖ Bonus: Optional or / fallback logic
You can use a custom helper if you want more control (e.g. fallback fields), but for your use case, the simple #if block is the best and cleanest way.

‚ú® Final Output Example
If this JSON comes in:
json
Copy
Edit
{
  "id": "U001",
  "name": "Alice",
  "email": "alice@example.com",
  "transaction": {}
}
Output will be:
yaml
Copy
Edit
User ID: U001
Name: Alice
Email: alice@example.com
