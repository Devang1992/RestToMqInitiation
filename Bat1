import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;

public class BatchFileGenerator {
    private static final int PAGE_LINES = 65;
    private static final int LINE_LENGTH = 134;
    private static final int PAGE_NUMBER_LINE = 65;

    public void generateFile(List<String> renderedMessages, Path outputPath) {
        List<String> finalOutput = new ArrayList<>();

        for (String renderedMessage : renderedMessages) {
            List<String> lines = splitLines(renderedMessage);

            // Split into pages of 65 lines max
            int totalPages = (int) Math.ceil((double) lines.size() / PAGE_LINES);

            for (int page = 1; page <= totalPages; page++) {
                List<String> pageLines = new ArrayList<>();

                pageLines.add(pad("1", LINE_LENGTH)); // Line 1 = '1'

                if (page == 1) {
                    pageLines.add(pad("##", LINE_LENGTH)); // Line 2 = '##' only on first page
                } else {
                    pageLines.add(pad("", LINE_LENGTH)); // empty for other pages
                }

                int start = (page - 1) * (PAGE_LINES - 2); // -2 for header lines
                int end = Math.min(start + (PAGE_LINES - 2), lines.size());
                List<String> contentSlice = lines.subList(start, end);
                for (String contentLine : contentSlice) {
                    pageLines.add(pad(contentLine, LINE_LENGTH));
                }

                // Pad remaining lines if needed
                while (pageLines.size() < PAGE_NUMBER_LINE - 1) {
                    pageLines.add(pad("", LINE_LENGTH));
                }

                // Add Page XX at the end
                pageLines.add(pad("Page " + String.format("%02d", page), LINE_LENGTH));

                // Add to final output
                finalOutput.addAll(pageLines);
            }
        }

        try {
            Files.write(outputPath, String.join("\r\n", finalOutput).getBytes(),
                    StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
            System.out.println("File written to: " + outputPath.toAbsolutePath());
        } catch (IOException e) {
            throw new RuntimeException("Error writing batch file", e);
        }
    }

    private List<String> splitLines(String content) {
        String[] rawLines = content.split("\r?\n");
        List<String> paddedLines = new ArrayList<>();
        for (String line : rawLines) {
            paddedLines.add(pad(line, LINE_LENGTH));
        }
        return paddedLines;
    }

    private String pad(String line, int length) {
        return String.format("%-" + length + "s", line);
    }
}
